{"version":3,"sources":["reducers/index.js","reducers/items.js","actions/items.js","components/ItemList/index.js","store/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","items","state","action","type","itemsHasErrored","hasErrored","itemsIsLoading","isLoading","bool","initialState","connect","dispatch","fetchData","url","fetch","then","response","ok","Error","statusText","json","itemsFetchDataSuccess","catch","itemsFetchData","props","useEffect","style","display","flexWrap","map","item","key","id","background","padding","margin","width","justifyContent","alignItems","label","store","createStore","rootReducer","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"yRAGeA,kBAAgB,CAC3BC,MCcG,WAAoC,IAArBC,EAAoB,uDAAZ,GAAIC,EAAQ,uCACxC,OAAQA,EAAOC,MACX,IAAK,2BACD,OAAOD,EAAOF,MAClB,QACI,OAAOC,IDlBbG,gBCLG,WAAiD,IAAxBH,EAAuB,wDAARC,EAAQ,uCACrD,OAAQA,EAAOC,MACX,IAAK,oBACD,OAAOD,EAAOG,WAClB,QACI,OAAOJ,IDCbK,eCGG,WAAgD,IAAxBL,EAAuB,wDAARC,EAAQ,uCACpD,OAAQA,EAAOC,MACX,IAAK,mBACD,OAAOD,EAAOK,UAClB,QACI,OAAON,MCPV,SAASK,EAAeE,GAC7B,MAAO,CACHL,KAAM,mBACNI,UAAWC,GCyBjB,IC/BuCC,ED6CxBC,eAdS,SAACT,GACvB,MAAO,CACHD,MAAOC,EAAMD,MACbK,WAAYJ,EAAMG,gBAClBG,UAAWN,EAAMK,mBAII,SAACK,GAC1B,MAAO,CACHC,UAAW,SAACC,GAAD,OAASF,EDxBnB,SAAwBE,GAC7B,OAAO,SAACF,GACJA,EAASL,GAAe,IACxBQ,MAAMD,GACDE,MAAK,SAACC,GACH,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAGzB,OADAR,EAASL,GAAe,IACjBU,KAEVD,MAAK,SAACC,GAAD,OAAcA,EAASI,UAC5BL,MAAK,SAACf,GAAD,OAAWW,EAnBpB,SAA+BX,GACpC,MAAO,CACHG,KAAM,2BACNH,SAgB8BqB,CAAsBrB,OAC/CsB,OAAM,kBAAMX,EAjCd,CACHR,KAAM,oBACNE,YA+B0C,QCWbkB,CAAeV,QAInCH,EA7Cf,SAAkBc,GAKhB,OAJAC,qBAAU,WACRD,EAAMZ,UAAU,sDACf,IAECY,EAAMnB,WACD,0EAGLmB,EAAMjB,UACD,4CAIP,wBAAImB,MAAO,CAACC,QAAS,OACnBC,SAAU,SACPJ,EAAMxB,MAAM6B,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,EAAKE,GAAIN,MAAO,CAACO,WAAY,aACZC,QAAS,SACTC,OAAQ,EACRR,QAAS,cACTS,MAAO,KACPC,eAAgB,SAChBC,WAAY,WACjCR,EAAKS,cEtBhBC,EDDKC,YACHC,EACAjC,EACAkC,YAAgBC,MCQTC,MARf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,QCCYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.87e7936e.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { items, itemsHasErrored, itemsIsLoading } from './items';\n\nexport default combineReducers({\n    items,\n    itemsHasErrored,\n    itemsIsLoading\n});\n","export function itemsHasErrored(state = false, action) {\n  switch (action.type) {\n      case 'ITEMS_HAS_ERRORED':\n          return action.hasErrored;\n      default:\n          return state;\n  }\n}\n\nexport function itemsIsLoading(state = false, action) {\n  switch (action.type) {\n      case 'ITEMS_IS_LOADING':\n          return action.isLoading;\n      default:\n          return state;\n  }\n}\n\nexport function items(state = [], action) {\n  switch (action.type) {\n      case 'ITEMS_FETCH_DATA_SUCCESS':\n          return action.items;\n      default:\n          return state;\n  }\n}\n","export function itemsHasErrored(bool) {\n  return {\n      type: 'ITEMS_HAS_ERRORED',\n      hasErrored: bool\n  };\n}\n\nexport function itemsIsLoading(bool) {\n  return {\n      type: 'ITEMS_IS_LOADING',\n      isLoading: bool\n  };\n}\n\nexport function itemsFetchDataSuccess(items) {\n  return {\n      type: 'ITEMS_FETCH_DATA_SUCCESS',\n      items\n  };\n}\n\nexport function itemsFetchData(url) {\n  return (dispatch) => {\n      dispatch(itemsIsLoading(true));\n      fetch(url)\n          .then((response) => {\n              if (!response.ok) {\n                  throw Error(response.statusText);\n              }\n              dispatch(itemsIsLoading(false));\n              return response;\n          })\n          .then((response) => response.json())\n          .then((items) => dispatch(itemsFetchDataSuccess(items)))\n          .catch(() => dispatch(itemsHasErrored(true)));\n  };\n}\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { itemsFetchData } from '../../actions/items';\n\nfunction ItemList(props) {\n  useEffect(() => {\n    props.fetchData('https://5826ed963900d612000138bd.mockapi.io/items');\n  }, []);\n\n  if (props.hasErrored) {\n    return <p>Sorry! There was an error loading the items</p>;\n  }\n  \n  if (props.isLoading) {\n    return <p>Loadingâ€¦</p>;\n  }\n  \n  return (\n    <ul style={{display: 'flex',\n      flexWrap: 'wrap'}}>\n        {props.items.map((item) => (\n            <li key={item.id} style={{background: 'whitesmoke', \n                                      padding: '32px 0', \n                                      margin: 4, \n                                      display: 'inline-flex', \n                                      width: '9%', \n                                      justifyContent: 'center', \n                                      alignItems: 'center'}}>\n                {item.label}\n            </li>\n        ))}\n    </ul>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n      items: state.items,\n      hasErrored: state.itemsHasErrored,\n      isLoading: state.itemsIsLoading\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      fetchData: (url) => dispatch(itemsFetchData(url))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemList);\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default function configureStore(initialState) {\n    return createStore(\n        rootReducer,\n        initialState,\n        applyMiddleware(thunk)\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport ItemList from './components/ItemList';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <ItemList />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}